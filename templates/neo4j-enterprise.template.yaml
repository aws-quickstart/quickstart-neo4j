AWSTemplateFormatVersion: '2010-09-09'
Description: Neo4j Graph Database. Do Not Remove Apache License Version 2.0.(qs-1shnl7a6p)
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Neo4j Configuration"
        Parameters: 
          - GraphDatabaseVersion
          - GraphDataScienceVersion
          - BloomVersion
          - Password
          - LicenseKey
      - Label: 
          default: "Infrastructure Configuration"
        Parameters: 
          - NodeCount
          - InstanceType
          - DiskSize
          - KeyName
  ParameterLabels:
    GraphDatabaseVersion: 
      default: Graph Database Version
    GraphDataScienceVersion: 
      default: Graph Data Science Version
    BloomVersion:
      default: Bloom Version
    Password: 
      default: Password
    LicenseKey: 
      default: License Key
    NodeCount: 
      default: Node Count
    InstanceType: 
      default: Instance Type
    DiskSize: 
      default: Disk Size
    KeyName: 
      default: Key Name

Parameters:
  GraphDatabaseVersion:
    Description: Neo4j Graph Database Version
    Type: String
    Default: '4.4.1'
    AllowedValues:
      - '4.4.1'
      - '4.3.8'

  GraphDataScienceVersion:
    Description: Neo4j Graph Data Science Version
    Type: String
    Default: 'None'
    AllowedValues:
      - 'None'
      - '1.8.0'

  BloomVersion:
    Description: Neo4j Bloom Version
    Type: String
    Default: 'None'
    AllowedValues:
      - 'None'
      - '2.0.0'

  Password:
    Description: Password for Neo4j
    Type: String
    MinLength: 6
    NoEcho: true

  LicenseKey:
    Description: Optional License Key for Graph Data Science and/or Bloom
    Type: String
    Default: AWS::NoValue

  NodeCount:
    Description: Number of core nodes
    Type: Number
    Default: 3
    AllowedValues:
      - 1
      - 3

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - r6i.large
      - r6i.xlarge
      - r6i.2xlarge
      - r6i.4xlarge
      - r6i.8xlarge
      - r6i.12xlarge
      - r6i.16xlarge
      - r6i.24xlarge
      - r6i.32xlarge

  DiskSize:
    Description: Size in GB of the EBS volume on each node
    Type: Number
    Default: 100

  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName

  ImageId:
    Description: AMI ID for each node
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  Neo4jAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ''
      LaunchConfigurationName:
        Ref: Neo4jLaunchConfiguration
      MinSize: 1
      MaxSize: 3
      DesiredCapacity:
        Ref: NodeCount

  Neo4jLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ImageId
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
      - Ref: Neo4jExternalSecurityGroup
      - Ref: Neo4jInternalSecurityGroup
      KeyName:
        Ref: KeyName
      EbsOptimized: true
      IamInstanceProfile:
        Ref: Neo4jInstanceProfile
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize:
            Ref: DiskSize
          VolumeType: gp3
          Encrypted: true
      UserData:
        Fn::Base64:
          !Join
          - ''
          - - "#!/bin/bash\n"
            - "echo Running startup script...\n"

            - "graphDatabaseVersion="
            - Ref: GraphDatabaseVersion
            - "\n"

            - "graphDataScienceVersion="
            - Ref: GraphDataScienceVersion
            - "\n"

            - "bloomVersion="
            - Ref: BloomVersion
            - "\n"

            - "password="
            - Ref: Password
            - "\n"

            - "licenseKey="
            - Ref: LicenseKey
            - "\n"

            - "nodeCount="
            - Ref: NodeCount
            - "\n"

            - "echo Adding neo4j yum repo...\n"
            - "rpm --import https://debian.neo4j.com/neotechnology.gpg.key\n"
            - "echo \""
            - "[neo4j]\n"
            - "name=Neo4j Yum Repo\n"
            - "baseurl=http://yum.neo4j.com/stable\n"
            - "enabled=1\n"
            - "gpgcheck=1\" > /etc/yum.repos.d/neo4j.repo\n"

            - "echo Writing neo4j license key file...\n"
            - "echo $licenseKey > /etc/neo4j/license/neo4j.license\n"

            - "echo Installing Graph Database...\n"
            - "export NEO4J_ACCEPT_LICENSE_AGREEMENT=yes\n"
            - "yum -y install neo4j-enterprise-${graphDatabaseVersion}\n"

            - "echo Configuring network in neo4j.conf...\n"
            - "sed -i 's/#dbms.default_listen_address=0.0.0.0/dbms.default_listen_address=0.0.0.0/g' /etc/neo4j/neo4j.conf\n"
            - "publicHostname=$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)\n"
            - "sed -i s/#dbms.default_advertised_address=localhost/dbms.default_advertised_address=${publicHostname}/g /etc/neo4j/neo4j.conf\n"

            - "if [[ \"$nodeCount\" == 1 ]]; then\n"
            - "  echo Running on a single node.\n"
            - "else\n"
            - "  echo Running on multiple nodes.  Configuring membership in neo4j.conf...\n"
            - "  region=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/.$//')\n"
            - "  instanceId=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n"
            - "  stackName=$(aws cloudformation describe-stack-resources --physical-resource-id $instanceId --query 'StackResources[0].StackName' --output text --region $region)\n"
            - "  coreMembers=$(aws autoscaling describe-auto-scaling-instances --region $region --output text --query \"AutoScalingInstances[?AutoScalingGroupName=='Neo4jAutoScalingGroup'].InstanceId\" | xargs -n1 aws ec2 describe-instances --instance-ids $ID --region $region --query \"Reservations[].Instances[].PublicDnsName\" --output text --filter \"Name=tag:aws:cloudformation:stack-name,Values=$stackName\")\n"
            - "  coreMembers=$(echo $coreMembers | sed 's/ /:5000,/g')\n"
            - "  coreMembers=$(echo $coreMembers):5000\n"
            - "  sed -i s/#causal_clustering.initial_discovery_members=localhost:5000,localhost:5001,localhost:5002/causal_clustering.initial_discovery_members=${coreMembers}/g /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#dbms.mode=CORE/dbms.mode=CORE/g /etc/neo4j/neo4j.conf\n"
            - "fi\n"
            
            - "echo Turning on SSL...\n"
            - "sed -i 's/dbms.connector.https.enabled=false/dbms.connector.https.enabled=true/g' /etc/neo4j/neo4j.conf\n"
            - "#sed -i 's/#dbms.connector.bolt.tls_level=DISABLED/dbms.connector.bolt.tls_level=OPTIONAL/g' /etc/neo4j/neo4j.conf\n"

            - "/etc/pki/tls/certs/make-dummy-cert cert\n"
            - "awk '/-----BEGIN PRIVATE KEY-----/,/-----END PRIVATE KEY-----/' cert > private.key\n"
            - "awk '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/' cert > public.crt\n"

            - "#for service in bolt https cluster backup; do\n"
            - "for service in https; do\n"
            - "  sed -i \"s/#dbms.ssl.policy.${service}/dbms.ssl.policy.${service}/g\" /etc/neo4j/neo4j.conf\n"
            - "  mkdir -p /var/lib/neo4j/certificates/${service}/trusted\n"
            - "  mkdir -p /var/lib/neo4j/certificates/${service}/revoked\n"
            - "  cp private.key /var/lib/neo4j/certificates/${service}\n"
            - "  cp public.crt /var/lib/neo4j/certificates/${service}\n"
            - "done\n"

            - "chown -R neo4j:neo4j /var/lib/neo4j/certificates\n"
            - "chmod -R 755 /var/lib/neo4j/certificates\n"

            - "if [[ \"$graphDataScienceVersion\" != None ]]; then\n"
            - "  echo Installing Graph Data Science...\n"
            - "  curl \"https://s3-eu-west-1.amazonaws.com/com.neo4j.graphalgorithms.dist/graph-data-science/neo4j-graph-data-science-${graphDataScienceVersion}-standalone.zip\" -o neo4j-graph-data-science-${graphDataScienceVersion}-standalone.zip\n"
            - "  unzip neo4j-graph-data-science-${graphDataScienceVersion}-standalone.zip\n"
            - "  mv neo4j-graph-data-science-${graphDataScienceVersion}.jar /var/lib/neo4j/plugins\n"
            - "fi\n"

            - "if [[ \"$bloomVersion\" != None ]]; then\n"
            - "  echo Installing Bloom...\n"
            - "  curl -L \"https://neo4j.com/artifact.php?name=neo4j-bloom-${bloomVersion}.zip\" -o neo4j-bloom-${bloomVersion}.zip\n"
            - "  unzip neo4j-bloom-${bloomVersion}.zip\n"
            - "  mv \"bloom-plugin-4.x-${bloomVersion}.jar\" /var/lib/neo4j/plugins\n"
            - "fi\n"

            - "echo Configuring Graph Data Science and Bloom in neo4j.conf...\n"
            - "sed -i s/#dbms.security.procedures.unrestricted=my.extensions.example,my.procedures.*/dbms.security.procedures.unrestricted=gds.*,bloom.*/g /etc/neo4j/neo4j.conf\n"
            - "sed -i s/#dbms.security.procedures.allowlist=apoc.coll.*,apoc.load.*,gds.*/dbms.security.procedures.allowlist=apoc.coll.*,apoc.load.*,gds.*,bloom.*/g /etc/neo4j/neo4j.conf\n"

            - "echo Starting Neo4j...\n"
            - "service neo4j start\n"
            - "neo4j-admin set-initial-password ${password}\n"

  Neo4jInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: Neo4jRole
  Neo4jRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: Neo4jPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - autoscaling:DescribeAutoScalingInstances
            - cloudformation:DescribeStack*
            - ec2:DescribeInstances
            Resource: "*"

  Neo4jExternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and Neo4j External Ports
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 7473
        ToPort: 7473
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 7474
        ToPort: 7474
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 7687
        ToPort: 7687
        CidrIp: 0.0.0.0/0

  Neo4jInternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Neo4j Internal Ports
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5000
        ToPort: 5000
        SourceSecurityGroupName: !Ref Neo4jExternalSecurityGroup
      - IpProtocol: tcp
        FromPort: 6000
        ToPort: 6000
        SourceSecurityGroupName: !Ref Neo4jExternalSecurityGroup
      - IpProtocol: tcp
        FromPort: 7000
        ToPort: 7000
        SourceSecurityGroupName: !Ref Neo4jExternalSecurityGroup
      - IpProtocol: tcp
        FromPort: 7688
        ToPort: 7688
        SourceSecurityGroupName: !Ref Neo4jExternalSecurityGroup
      - IpProtocol: tcp
        FromPort: 2003
        ToPort: 2003
        SourceSecurityGroupName: !Ref Neo4jExternalSecurityGroup
      - IpProtocol: tcp
        FromPort: 2004
        ToPort: 2004
        SourceSecurityGroupName: !Ref Neo4jExternalSecurityGroup
      - IpProtocol: tcp
        FromPort: 3637
        ToPort: 3637
        SourceSecurityGroupName: !Ref Neo4jExternalSecurityGroup
      - IpProtocol: tcp
        FromPort: 5005
        ToPort: 5005
        SourceSecurityGroupName: !Ref Neo4jExternalSecurityGroup

Outputs:
  Neo4jURL:
    Description: URL for Neo4j
    Value:
      Fn::Join:
        - ''
        - - 'You can login to Neo4j on port 7474 (http) or 7473 (https) of any node in the autoscaling group.'
