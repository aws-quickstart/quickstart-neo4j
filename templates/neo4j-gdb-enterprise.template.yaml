AWSTemplateFormatVersion: '2010-09-09'
Description: Neo4j Graph Database
Parameters:

  Version:
    Description: Version
    Type: String
    Default: '4.4.0'
    AllowedValues:
      - '4.4.0'
      - '4.3.7'

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge

  NodeCount:
    Description: Number of core nodes
    Type: Number
    Default: 3
    AllowedValues:
      - 1
      - 3

  Password:
    Description: Password for Neo4j
    Type: String
    NoEcho: true

  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: 'AWS::EC2::KeyPair::KeyName'

  DiskSize:
    Description: Size in GB of the EBS volume on each node
    Type: Number
    Default: 100

  AMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:

  Neo4jAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ''
      LaunchConfigurationName:
        Ref: Neo4jLaunchConfiguration
      MinSize: 1
      MaxSize: 5
      DesiredCapacity:
        Ref: NodeCount

  Neo4jLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'AMIID'
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
      - Ref: Neo4jSecurityGroup
      KeyName:
        Ref: KeyName
      EbsOptimized: true
      IamInstanceProfile:
        Ref: Neo4jInstanceProfile
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize:
            Ref: DiskSize
          VolumeType: gp3
          Encrypted: true
      UserData:
        Fn::Base64:
          !Join
          - ''
          - - "#!/bin/bash\n"
            - "echo Running startup script...\n"

            - "version="
            - Ref: Version
            - "\n"

            - "nodeCount="
            - Ref: NodeCount
            - "\n"

            - "password="
            - Ref: Password
            - "\n"

            - "echo Adding neo4j yum repo...\n"
            - "rpm --import https://debian.neo4j.com/neotechnology.gpg.key\n"
            - "echo \""
            - "[neo4j]\n"
            - "name=Neo4j Yum Repo\n"
            - "baseurl=http://yum.neo4j.com/stable\n"
            - "enabled=1\n"
            - "gpgcheck=1\" > /etc/yum.repos.d/neo4j.repo\n"

            - "echo Installing Neo4j...\n"
            - "export NEO4J_ACCEPT_LICENSE_AGREEMENT=yes\n"
            - "yum -y install neo4j-enterprise-${version}\n"

            - "echo Configuring network in neo4j.conf...\n"
            - "sed -i 's/#dbms.default_listen_address=0.0.0.0/dbms.default_listen_address=0.0.0.0/g' /etc/neo4j/neo4j.conf\n"
            - "publicHostname=$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)\n"
            - "sed -i s/#dbms.default_advertised_address=localhost/dbms.default_advertised_address=${publicHostname}/g /etc/neo4j/neo4j.conf\n"

            - "if [[ \"$nodeCount\" == 1 ]]; then\n"
            - "  echo Running on a single node.\n"
            - "else\n"
            - "  echo Running on multiple nodes.  Configuring membership in neo4j.conf...\n"
            - "  region=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/.$//')\n"
            - "  instanceId=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n"
            - "  stackName=$(aws cloudformation describe-stack-resources --physical-resource-id $instanceId --query 'StackResources[0].StackName' --output text --region $region)\n"
            - "  coreMembers=$(aws autoscaling describe-auto-scaling-instances --region $region --output text --query \"AutoScalingInstances[?AutoScalingGroupName=='Neo4jAutoScalingGroup'].InstanceId\" | xargs -n1 aws ec2 describe-instances --instance-ids $ID --region $region --query \"Reservations[].Instances[].PublicDnsName\" --output text --filter \"Name=tag:aws:cloudformation:stack-name,Values=$stackName\")\n"
            - "  coreMembers=$(echo $coreMembers | sed 's/ /:5000,/g')\n"
            - "  coreMembers=$(echo $coreMembers):5000\n"
            - "  sed -i s/#causal_clustering.initial_discovery_members=localhost:5000,localhost:5001,localhost:5002/causal_clustering.initial_discovery_members=${coreMembers}/g /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#dbms.mode=CORE/dbms.mode=CORE/g /etc/neo4j/neo4j.conf\n"
            - "fi\n"

            - "service neo4j start\n"
            - "neo4j-admin set-initial-password ${password}\n"

  Neo4jInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: Neo4jRole
  Neo4jRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: Neo4jPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudformation:DescribeStackResource
            - autoscaling:DescribeAutoScalingInstances
            - ec2:DescribeInstances
            Resource: "*"
  Neo4jSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and Neo4j Ports
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 7474
        ToPort: 7474
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 7473
        ToPort: 7473
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 7687
        ToPort: 7687
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 5000
        ToPort: 5000
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 6000
        ToPort: 6000
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 7000
        ToPort: 7000
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 7688
        ToPort: 7688
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 2003
        ToPort: 2003
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 2004
        ToPort: 2004
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3637
        ToPort: 3637
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 5005
        ToPort: 5005
        CidrIp: 0.0.0.0/0
