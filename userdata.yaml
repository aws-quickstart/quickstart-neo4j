
          - - "#!/bin/bash\n"
            - "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n"
            - 'export API=http://169.254.169.254/latest/'
            - 'export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)'
            - 'export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)'
            - 'export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)'
            - "aws ec2 describe-tags --region $EC2_REGION --filter \"Name=resource-id,Values=$EC2_INSTANCE_ID\"
              'Name=key,Values=node_name'  --output=json | jq -r .Tags[0].Value > /etc/hostname
              \n"
            - "hostnamectl set-hostname $(aws ec2 describe-tags --region $EC2_REGION --filter
              \"Name=resource-id,Values=$EC2_INSTANCE_ID\" 'Name=key,Values=node_name'  --output=json
              | jq -r .Tags[0].Value ) \n"
            - 'export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID}
              Name=attachment.device,Values=/dev/sda1 --query ''Volumes[*].[VolumeId]''
              --region=${EC2_REGION} --out text | cut -f 1)'
            - 'export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID}
              Name=attachment.device,Values=/dev/sdb --query ''Volumes[*].[VolumeId]'' --region=${EC2_REGION}
              --out text | cut -f 1)'
            - 'env | tee -a $LOGFILE'
            - "# Tag volumes, which CloudFormation does not allow\n"
            - "# Root volume: /dev/sda, data volume /dev/sdb\n"
            - 'aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value="Root
              Neo4j Vol for $EC2_INSTANCE_ID" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE'
            - 'aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value="Neo4j
              Data Vol for $EC2_INSTANCE_ID" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE

              '
            - "# Format EBS storage, and mount it in Neo4j directory\n"
            - 'echo `date` ''Preparing neo4j volume...'' | tee -a $LOGFILE

              '
            - 'mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE

              '
            - 'mkdir /tmpmount 2>&1 | tee -a $LOGFILE

              '
            - 'mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE

              '
            - 'cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE

              '
            - 'umount /tmpmount 2>&1 | tee -a $LOGFILE

              '
            - 'rm -rf /tmpmount 2>&1 | tee -a $LOGFILE

              '
            - 'echo `date` ''Remounting new volume in place...'' | tee -a $LOGFILE

              '
            - 'mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE

              '
            - 'FSTAB_ENTRY=''/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2''

              '
            - 'echo $FSTAB_ENTRY >> /etc/fstab

              '
            - 'mount -a 2>&1 | tee -a $LOGFILE

              '
            - 'echo `date` ''Preparing neo4j service...'' | tee -a $LOGFILE

              '
            - "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n"
            - "/usr/bin/neo4j-admin set-initial-password "
            - Ref: Password
            - " \n"
            - "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n"
            - "\n"
            - 'sudo apt-get update

              '
            - 'mkdir aws-cfn-bootstrap-latest

              '
            - 'curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
              | tar xz -C aws-cfn-bootstrap-latest --strip-components 1

              '
            - 'python /usr/lib/python2.7/dist-packages/easy_install.py aws-cfn-bootstrap-latest

              '
            - "\n"
            - echo Stack ID '
            - Ref: AWS::StackId
            - "' | tee -a $LOGFILE\n"
            - export STACK_TOKEN=$(echo '
            - Ref: AWS::StackId
            - "' | base64 | tail -c 12)\n"
            - "# Loop waiting for neo4j service to start.\n"
            - 'while true; do

              '
            - "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n"
            - "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n"
            - "        break\n"
            - "    fi\n"
            - "\n"
            - "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n"
            - "    sleep 1\n"
            - 'done

              '
            - "\n"
            - 'echo Signaling stack success | tee -a $LOGFILE

              '
            - "/usr/local/bin/cfn-signal --stack "
            - Ref: AWS::StackName
            - " \\\n"
            - "       --id $EC2_INSTANCE_ID \\\n"
            - "       --region "
            - Ref: AWS::Region
            - " \\\n"
            - '       --success true -d "$STACK_TOKEN" '''
            - Ref: StackTokenWaitHandle
            - "' 2>&1 | tee -a $LOGFILE \n"




